function [Xhat,T,V,G,Z,Q,cost] = subguas_FastMNMF(X,XX,N,K,maxIt,drawConv,G,T,V,Z,Q)
%% multichannelNMF: Blind source separation based on multichannel NMF
%% Coded by D. Kitamura (d-kitamura@ieee.org)
%% # Original paper
% [1] H. Sawada, H. Kameoka, S. Araki, and N. Ueda,	"Multichannel extensions of non-negative matrix factorization with complex-valued data," IEEE
% Transactions on Audio, Speech, and Language Processing, vol. 21, no. 5, pp. 971-982, May 2013.
% [2] Joint-Diagonalizability-Constrained Multichannel Nonnegative Matrix Factorization Based on Multivariate Complex Sub-Gaussian Distribution
%% see also% http://d-kitamura.net
%
% [syntax]
%   [T,V,H,Z,cost] = multichannelNMF(XX,N)
%   [T,V,H,Z,cost] = multichannelNMF(XX,N,K)
%   [T,V,H,Z,cost] = multichannelNMF(XX,N,K,it)
%   [T,V,H,Z,cost] = multichannelNMF(XX,N,K,it,drawConv)
%   [T,V,H,Z,cost] = multichannelNMF(XX,N,K,it,drawConv,T)
%   [T,V,H,Z,cost] = multichannelNMF(XX,N,K,it,drawConv,T,V)
%   [T,V,H,Z,cost] = multichannelNMF(XX,N,K,it,drawConv,T,V,H)
%   [T,V,H,Z,cost] = multichannelNMF(XX,N,K,it,drawConv,T,V,H,Z)
%
% [inputs]
%        XX: input 4th-order tensor (time-frequency-wise covariance matrices) (I x J x M x M)
%         N: number of sources
%         K: number of bases (default: ceil(J/10))
%        it: number of iteration (default: 300)
%  drawConv: plot cost function values in each iteration or not (true or false)
%         T: initial basis matrix (I x K)
%         V: initial activation matrix (K x J)
%         G: initial spatial covariance tensor (I x N x M )
%         Z: initial partitioning matrix (K x N)
%         Q: diagonalizer (I x M x M)
% [outputs]
%      Xhat: output 4th-order tensor reconstructed by T, V, H, and Z (I x J x M x M)
%         T: basis matrix (I x K)
%         V: activation matrix (K x J)
%         G: spatial covariance tensor (I x N x M x M)
%         Z: partitioning matrix (K x N)
%         Q: diagonalizer (I x M x M)
%      cost: convergence behavior of cost function in multichannel NMF (maxIt+1 x 1)

% Check errors and set default values
[I,J,M,M] = size(XX);
delta = 0.001; % to avoid numerical conputational instability
if size(XX,3) ~= size(XX,4)
    error('The size of input tensor is wrong.\n');
end
if (nargin < 4)
    K = ceil(J/10);
end
if (nargin < 5)
    maxIt = 300;
end
if (nargin < 6)
    drawConv = false;
end
if (nargin < 7)
%     initg_f = 1e-2 * ones(M) - diag(diag(1e-2 * ones(M))) + eye(M);
%     G = repmat(initg_f,[1,1,I]);
%     G = permute(G,[3,1,2]); % I x N x M  "N=M"
      initg_f = eye(M);G = repmat(initg_f,[1,1,I]);
      G = permute(G,[3,1,2]); % I x N x M  "N=M"
 
end
if (nargin < 8)
    T = max(rand(I,K),eps);
end
if (nargin < 9)
    V = max(rand(K,J),eps);
end
if (nargin < 10)
    varZ = 0.01;
    Z = varZ*rand(K,N) + 1/N;
    Z = max( Z./sum(Z,2), eps ); % to ensure "sum_n Z_kn = 1" (using implicit expansion)
%     Z = bsxfun(@rdivide, Z, sum(Z,2)); % for prior R2016b
end
if (nargin < 11)
    Q = repmat(eye(M),1,1,I);
    Q = permute(Q,[3,1,2]); % I x M x M
end
if sum(size(T) ~= [I,K]) || sum(size(V) ~= [K,J]) || sum(size(G) ~= [I,N,M]) || sum(size(Z) ~= [K,N])
    error('The size of input initial variable is incorrect.\n');
end
Xhat = local_Xhat( T, V, G, Z, I, J, M ); % (17) of [2] initial model tensor I *M *M 
beta = 4;
phi = local_phi(Q, X, Xhat, beta, I, J, M);% (18) of [2]
% size(Xhat) =I *J *M
% Iterative update
fprintf('Iteration:    ');
if ( drawConv == true )
    cost = zeros( maxIt+1, 1 );
    cost(1) = local_cost( X, Xhat, I, J, M ,Q, beta); % initial cost value
    for it = 1:maxIt
        fprintf('\b\b\b\b%4d', it);
        [ Xhat, T, V, G, Z, Q ] = local_iterativeUpdate(X, XX, Xhat, T, V, G, Z, I, J, K, N, M ,Q, phi, beta);
        cost(it+1) = local_cost( XX, Xhat, I, J, M );
    end
    figure;
    semilogy( (0:maxIt), cost );
    set(gca,'FontName','Times','FontSize',16);
    xlabel('Number of iterations','FontName','Arial','FontSize',16);
    ylabel('Value of cost function','FontName','Arial','FontSize',16);
else
    cost = 0;
    for it = 1:maxIt
        fprintf('\b\b\b\b%4d', it);
        [ Xhat, T, V, G, Z, Q ,phi ] = local_iterativeUpdate(X, XX, Xhat, T, V, G, Z, I, J, K, N, M ,Q, phi, beta);
    end
end

fprintf(' Subguass Fast MNMF done.\n');
end

%%% Xhat %%%
function [ Xhat ] = local_Xhat( T, V, G, Z, I, J, M)
Xhat = zeros(I,J,M); %N=M; G_joint = zeros(N,M,I);
for mm = 1:M
    Gmm = G(:,:,mm); % I x N
    Xhat(:,:,mm) = ((Gmm*Z').*T)*V; % (17) of [2] & (40) of [1]
end %size(Xhat)      size(Gmm*Z')                     size(T)   size(V)
    % I * J * M      (I x N)*(N x K) =I(fre)*K        I*K       K*J(time frame)
end
%%% phi %%%
function [ phi ] = local_phi(Q, X, Xhat, beta, I, J, M )
phi = zeros(I,J,M); 
QX_power = zeros(I,J,M);
for ii = 1:I
    QX_power(ii,:,:) = abs(squeeze(X(ii,:,:)) * squeeze(Q(ii,:,:))).^2;% I* J* M
end
for mm = 1:M
    phi(:,:,mm) = QX_power(:,:,mm).*(sum(QX_power./(Xhat+eps),3).^(beta/2-1));% I* J* M  (18) of [2]
end
end

%%% Cost function %%%
function [ cost ] = local_cost( X, Xhat, I, J, M ,Q, beta)
sumq = 0;
for i = 1:I sumq = sumq + det(Q(i,:,:)); end
mul2 = sum(sum(sum(log(Xhat + eps))));
QX  = local_QX( Q, X, I, J, M);% I * J * M
mul3 = sum(sum(sum(QX.^2./(Xhat+eps),3).^(beta/2)));
cost = -2 * J * sum(log(abs(sumq))) + mul2 + mul3; % (10) of [2]
end

%%% G joint %%%
function [ G_joint ] = local_gjoint( Q, G, I, N, M)
G_joint = zeros(N,M,I);
Q_hat = permute(Q,[2,3,1]);G_hat = permute(G,[2,3,1]); 
for ii = 1:I
    G_joint(:,:,ii) = Q_hat(:,:,ii) * G_hat(:,:,ii) * Q_hat(:,:,ii)';%  N x M x I 
end
G_joint = permute(G_joint,[3,1,2]);% I x N x M
end

%%% Iterative update %%%
function [ Xhat, T, V, G, Z, Q,phi] = local_iterativeUpdate(X, XX, Xhat, T, V, G, Z, I, J, K, N, M ,Q, phi, beta)
%%%%% Update T %%%%%

phi_X_hat = phi./ (Xhat+eps).^2 ;Xhat_reci = 1./(Xhat+eps);% (19) of [2]分子中的 phi/x_hat.^2,与 1/x_hat拆分
Tnume = local_Tfrac( phi_X_hat, V, Z, G, I, K, M ); % I x K         % % (19) of [2]分子更新
Tdeno = local_Tfrac( Xhat_reci, V, Z, G, I, K, M ); % I x K         % % (19) of [2]分母更新
T = T.*max((beta/2 .* Tnume./(Tdeno+eps)).^(2/(beta+2)),eps); % (19) of [2] subguass
 
Xhat = local_Xhat( T, V, G, Z, I, J, M );
phi = local_phi(Q, X, Xhat, beta, I, J, M );

%%%%% Update V %%%%%
phi_X_hat = phi./(Xhat+eps).^2 ;Xhat_reci = 1./(Xhat+eps);
Vnume = local_Vfrac( phi_X_hat, T, Z, G, J, K, M ); % K x J 分子更新
Vdeno = local_Vfrac( Xhat_reci, T, Z, G, J, K, M ); % K x J 分母更新
V = V.*max((beta/2 .* Vnume./(Vdeno+eps)).^(2/(beta+2)),eps); % (20) of [2]

Xhat = local_Xhat( T, V, G, Z, I, J, M );
phi = local_phi(Q, X, Xhat, beta, I, J, M );

%%%%% Update Z %%%%%
phi_X_hat = phi./ (Xhat+eps).^2 ;Xhat_reci = 1./(Xhat+eps);
Znume = local_Zfrac( phi_X_hat, T, V, G, K, N, M ); % K x N 分子更新
Zdeno = local_Zfrac( Xhat_reci, T, V, G, K, N, M ); % K x N 分母更新
Z = Z.*(beta/2 .*Znume./(Zdeno+eps)).^(2/(beta+2));  % (21) of [2]
Z = max( Z./sum(Z,2), eps ); % to ensure "sum_n Z_kn = 1" (using implicit expansion)
 
Xhat = local_Xhat( T, V, G, Z, I, J, M );
phi = local_phi(Q, X, Xhat, beta, I, J, M );

%%%%% Update G %%%%%
phi_X_hat = phi./ (Xhat+eps).^2 ;Xhat_reci = 1./(Xhat+eps);
Gnume     = local_Gfrac( phi_X_hat, T, V, Z, I, N, M); % K x N 分子更新
Gdeno     = local_Gfrac( Xhat_reci, T, V, Z, I, N, M ); % K x N 分母更新
G         = G.*(beta/2 .*Gnume./(Gdeno+eps)).^(2/(beta+2)); % (22) of [2]

Xhat = local_Xhat( T, V, G, Z, I, J, M );
% phi = local_phi(Q, X, Xhat, beta, I, J, M );

%%%%% Update Q %%%%%
QX    = local_QX( Q, X, I, J, M);
r_ijm = local_r_ijm( QX, Xhat, beta, I, J, M);% (33) of [2]
U_im  = local_U_im( QX, XX, r_ijm, beta, I, J, M);% (34) of [2]
B_im  = local_B_im( Q, QX, U_im, XX, r_ijm, beta, I, J, M);% (35) of [2]
Q     = local_Q( Q, QX, B_im, r_ijm, beta, I, J, M);% (36,37) of [2]

%% normalize Q，G, T, V
QQ = real(sum(sum(Q.*conj(Q),2),3)/M); Q = Q./(sqrt(QQ)+eps);
% G = G./(QQ+eps) ;
for i=1:I G(i,:,:) = G(i,:,:)./trace(squeeze(G(i,:,:)));end
% G_sum = sum(real(G),3);% I * N 
% G = G./(G_sum+eps) ;
% T = T .* sum(G_sum,2);%sum(G_sum,2);% I * K  ????
% 
% T_sum = sum(real(T),1);% 1 * K
% T = T./(T_sum+eps);
% V = V .* T_sum';
% V_sum = sum(real(V),1);% 1 * J

%         phi_F = self.xp.sum(self.Q_FMM * self.Q_FMM.conj(), axis=(1, 2)).real / self.n_mic
%         self.Q_FMM = self.Q_FMM / self.xp.sqrt(phi_F)[:, None, None]
%         self.G_NFM = self.G_NFM / phi_F[None, :, None]
% 
%         mu_NF = (self.G_NFM).sum(axis=2).real
%         self.G_NFM = self.G_NFM / mu_NF[:, :, None]
%         self.W_NFK = self.W_NFK * mu_NF[:, :, None]
% 
%         nu_NK = self.W_NFK.sum(axis=1)
%         self.W_NFK = self.W_NFK / nu_NK[:, None]
%         self.H_NKT = self.H_NKT * nu_NK[:, :, None]
%         self.lambda_NFT = self.W_NFK @ self.H_NKT + EPS

Xhat = local_Xhat( T, V, G, Z, I, J, M );
phi = local_phi(Q, X, Xhat, beta, I, J, M );
end


%%% Tfrac %%%
function [ Tfrac ] = local_Tfrac( XX, V, Z, G, I, K, M )
Tfrac = zeros(I,K); %size(X)  % I * J * M 
for mm = 1:M
    Tfrac = Tfrac + real( (XX(:,:,mm)*V').*(conj(G(:,:,mm))*Z') ); % using tr(AB') = sum_{i,j} (A_{ij}*B_{ij})
end %size(X(:,:,mm)) I * J x size(V') J * K = I*K  
end %(42) of [1] size(H(:,:,mm))  I*L  size(Z')  K*L

%%% Vfrac %%%
function [ Vfrac ] = local_Vfrac(XX, T, Z, G, J, K, M )
Vfrac = zeros(K,J);
for mm = 1:M
    Vfrac = Vfrac + real( ((G(:,:,mm)*Z').*T)'*XX(:,:,mm) ); % using tr(AB') = sum_{i,j} (A_{ij}*B_{ij})
end %size(H(:,:,mm)) I*L x size(Z')  L*K  =I*K  size(X(:,:,mm)) I*J
 
end %size( ((H(:,:,mm)*Z').*T)'*X(:,:,mm))   (I*K)'x (I*J) = K*J

%%% Zfrac %%%
function [ Zfrac ] = local_Zfrac( XX, T, V, G, K, N, M)
Zfrac = zeros(K,N);
for mm = 1:M
    Zfrac = Zfrac + real( ((XX(:,:,mm)*V.').*T)'*G(:,:,mm) ); % using tr(AB') = sum_{i,j} (A_{ij}*B_{ij})
end % size(X(:,:,mm)) I*J size(V.') J*K  size(((X(:,:,mm)*V.').*T))  (I*J) x (J*K) =I*K
end %size(G(:,:,mm))  I*K

%%% Gfrac %%%
function [ Gfrac ] = local_Gfrac( XX, T, V, Z, I, N, M)
Gfrac = zeros(I,N,M);
for mm = 1:M
    Gfrac(:,:,mm) = Gfrac(:,:,mm) + real( ((XX(:,:,mm)*V.').*T)* Z ); % 
end % size(X(:,:,mm)) I*J size(V.') J*K  size(((X(:,:,mm)*V.').*T))  (I*K) x (K*N) =I*N
end

%%% QX %%%
function [ QX ] = local_QX( Q, X, I, J, M)
QX = zeros(I,J,M);
for ii = 1:I
    QX(ii,:,:) = abs(squeeze(X(ii,:,:)) * squeeze(Q(ii,:,:)));% I* J* M
end
end

%%% r_ijm %%%
function [ r_ijm ] = local_r_ijm(QX, Xhat, beta, I, J, M)
r_ijm = zeros(I,J,M); 
for mm = 1:M
    r_ijm(:,:,mm) = QX(:,:,mm).^(1-2/beta).* Xhat(:,:,mm).^(1/beta).* (sum(QX.^2./(Xhat+eps),3).^(1/beta-1/2));% (33) of [2]
end
end

%%% U_im %%%
function [ U_im ] = local_U_im(QX, XX, r_ijm, beta, I, J, M)
U_im = zeros(I,M,M,M); % 维度变化为I *M *M *M
MU1 = sqrt(QX.^(4-beta).* r_ijm.^beta);% I* J* M
for m=1:M
    U_im(:,m,:,:) = sum( XX./ (MU1(:,:,m)+eps),2);% (34) of [2]
end
end

%%% B_im %%%
function [ B_im ] = local_B_im( Q, QX, U_im, XX, r_ijm, beta, I, J, M)
SUM1 = zeros(I,M,M,M);SUM2 = zeros(I,M,M,M); SUM3 = zeros(I,M,M,M);
for i = 1:I
    for m=1:M
    SUM1(i,m,:,:) = squeeze(Q(i,:,:))'*squeeze(U_im(i,m,:,:))*squeeze(Q(i,:,:))*squeeze(U_im(i,m,:,:));% I* M* M* M % (35)of [2] 第一项
    SUM3(i,m,:,:) = squeeze(U_im(i,m,:,:))*squeeze(Q(i,:,:))*(squeeze(U_im(i,m,:,:))*squeeze(Q(i,:,:)))';% (35)of [2] 第三项
    end
end
for m=1:M
    QX_r_ijm = QX.^(beta-2)./(r_ijm.^beta+eps);
    SUM2(:,m,:,:) = sum( XX.* QX_r_ijm(:,:,m),2);end % (35)of [2] 第二项
% SUM2(:,m,:,:) = sum( XX.* (QX.^(beta-2)./(r_ijm(:,:,m)+eps).^beta),2);end % (35)of [2] 第二项
B_im = SUM1 + SUM2 - SUM3 ;% (35)of [2] I* M* M* M
end

%%% Q  update%%%
function [ Q ] = local_Q( Q, QX, B_im, r_ijm, beta, I, J, M)
ekm = eye(M);
for i = 1:I
    for m=1:M
        Q_temp = pinv(squeeze(Q(i,:,:))*squeeze(B_im(i,m,:,:)))*ekm(:,m);% INV
        Q(i,m,:) = Q_temp';
    end
end
   QX_r_ijm = QX.^beta./ (r_ijm.^beta+eps);
for m=1:M
%     Q(:,m,:) = Q(:,m,:).* ((2*J/beta)./ (sum(QX.^beta./ (r_ijm(:,:,m)+eps).^beta,2)+eps)).^(1/beta);
     Q(:,m,:) = Q(:,m,:).* ((2*J/beta)./ ((sum(QX_r_ijm(:,:,m),2))+eps)).^(1/beta);
end
end

%%% Riccati solver %%%
%input; size(X)  I*K*M*M
%input; size(Y)  I*K*M*M
function [ H ] = local_RiccatiSolver(X, XX, Y, T, V, H, Z, I, J, N, M)
XX = reshape(permute(XX, [3 4 2 1]), [M*M, J, I]); % invXhatXinvXhat, MM x J x I
Y = reshape(permute(Y, [3 4 2 1]), [M*M, J, I]); % invXhat, MM x J x I
deltaEyeM = eye(M)*(10^(-12)); % to avoid numerical instability
for n = 1:N % Riccati equation solver described in the original paper
    for i = 1:I %size(X(:,:,i))  M*M   J
        ZTV = (T(i,:).*Z(:,n)')*V;   %size(T(i,:)) 1*K; size(Z(:,n)')  1*K size(T(i,:).*Z(:,n)')  1*K 
        % size(V) K*J
        A = reshape(Y(:,:,i)*ZTV', [M, M]); % (46) of [1] size(Y(:,:,i))  MM x J 
        B = reshape(XX(:,:,i)*ZTV', [M, M]); % (47) of [1] size(X(:,:,i))  MM x J 
        Hin = reshape(H(i,n,:,:), [M, M]);  % size(H(i,n,:,:)) 1*1*2*2
        C = Hin*B*Hin; % (47) of [1] 
        AC = [zeros(M), -1*A; -1*C, zeros(M)];% (56) of [1]
        [eigVec, eigVal] = eig(AC);
        ind = find(diag(eigVal)<0);
        F = eigVec(1:M,ind);
        G = eigVec(M+1:end,ind);
        Hin = G/F; % G*inv(F); % (58) of [1]
        Hin = (Hin+Hin')/2 + deltaEyeM;  %  third line below (58) of [1]
        H(i,n,:,:) = Hin/trace(Hin);
    end
end
% for n = 1:N % Another solution of Riccati equation, which is slower than the above one. The calculation result coincides with that of the above calculation.
%     for i = 1:I
%         ZTV = (T(i,:).*Z(:,n).')*V; % 1 x J
%         A = reshape( Y(:,:,i)*ZTV.', [M, M] ); % M x M
%         B = sqrtm(reshape( X(:,:,i)*ZTV.', [M, M] )); % M x M
%         Hin = reshape( H(i,n,:,:), [M, M] );
%         Hin = Hin*B/sqrtm((B*Hin*A*Hin*B))*B*Hin; % solution of Riccati equation
%         Hin = (Hin+Hin')/2; % "+eye(M)*delta" should be added here for avoiding rank deficient in such a case
%         H(i,n,:,:) = Hin/trace(Hin);
%     end
% end
end

%%% MultiplicationXXX %%%
function [ XYX ] = local_multiplicationXYX( X, Y, I, J, M )
if M == 2
    %tic
    XYX = zeros( I, J, M, M );
    x2 = real(X(:,:,1,2).*conj(X(:,:,1,2)));
    xy = X(:,:,1,2).*conj(Y(:,:,1,2));
    ac = X(:,:,1,1).*Y(:,:,1,1);
    bd = X(:,:,2,2).*Y(:,:,2,2);
    XYX(:,:,1,1) = Y(:,:,2,2).*x2 + X(:,:,1,1).*(2*real(xy)+ac);
    XYX(:,:,2,2) = Y(:,:,1,1).*x2 + X(:,:,2,2).*(2*real(xy)+bd);
    XYX(:,:,1,2) = X(:,:,1,2).*(ac+bd+xy) + X(:,:,1,1).*X(:,:,2,2).*Y(:,:,1,2);
    XYX(:,:,2,1) = conj(XYX(:,:,1,2));
    %toc
else % slow
    %tic
    XY = local_multiplication( X, Y, I, J, M );
    XYX = local_multiplication( XY, X, I, J, M );
    %toc
end
end

%%% Multiplication %%%
function [ XY ] = local_multiplication( X, Y, I, J, M )
if M == 2
    XY = zeros( I, J, M, M );  % 2048*128*2*2
    XY(:,:,1,1) = X(:,:,1,1).*Y(:,:,1,1) + X(:,:,1,2).*Y(:,:,2,1);
    XY(:,:,1,2) = X(:,:,1,1).*Y(:,:,1,2) + X(:,:,1,2).*Y(:,:,2,2);
    XY(:,:,2,1) = X(:,:,2,1).*Y(:,:,1,1) + X(:,:,2,2).*Y(:,:,2,1);
    XY(:,:,2,2) = X(:,:,2,1).*Y(:,:,1,2) + X(:,:,2,2).*Y(:,:,2,2);
elseif M == 3
    XY = zeros( I, J, M, M );
    XY(:,:,1,1) = X(:,:,1,1).*Y(:,:,1,1) + X(:,:,1,2).*Y(:,:,2,1) + X(:,:,1,3).*Y(:,:,3,1);
    XY(:,:,1,2) = X(:,:,1,1).*Y(:,:,1,2) + X(:,:,1,2).*Y(:,:,2,2) + X(:,:,1,3).*Y(:,:,3,2);
    XY(:,:,1,3) = X(:,:,1,1).*Y(:,:,1,3) + X(:,:,1,2).*Y(:,:,2,3) + X(:,:,1,3).*Y(:,:,3,3);
    XY(:,:,2,1) = X(:,:,2,1).*Y(:,:,1,1) + X(:,:,2,2).*Y(:,:,2,1) + X(:,:,2,3).*Y(:,:,3,1);
    XY(:,:,2,2) = X(:,:,2,1).*Y(:,:,1,2) + X(:,:,2,2).*Y(:,:,2,2) + X(:,:,2,3).*Y(:,:,3,2);
    XY(:,:,2,3) = X(:,:,2,1).*Y(:,:,1,3) + X(:,:,2,2).*Y(:,:,2,3) + X(:,:,2,3).*Y(:,:,3,3);
    XY(:,:,3,1) = X(:,:,3,1).*Y(:,:,1,1) + X(:,:,3,2).*Y(:,:,2,1) + X(:,:,3,3).*Y(:,:,3,1);
    XY(:,:,3,2) = X(:,:,3,1).*Y(:,:,1,2) + X(:,:,3,2).*Y(:,:,2,2) + X(:,:,3,3).*Y(:,:,3,2);
    XY(:,:,3,3) = X(:,:,3,1).*Y(:,:,1,3) + X(:,:,3,2).*Y(:,:,2,3) + X(:,:,3,3).*Y(:,:,3,3);
elseif M == 4
    XY = zeros( I, J, M, M );
    XY(:,:,1,1) = X(:,:,1,1).*Y(:,:,1,1) + X(:,:,1,2).*Y(:,:,2,1) + X(:,:,1,3).*Y(:,:,3,1) + X(:,:,1,4).*Y(:,:,4,1);
    XY(:,:,1,2) = X(:,:,1,1).*Y(:,:,1,2) + X(:,:,1,2).*Y(:,:,2,2) + X(:,:,1,3).*Y(:,:,3,2) + X(:,:,1,4).*Y(:,:,4,2);
    XY(:,:,1,3) = X(:,:,1,1).*Y(:,:,1,3) + X(:,:,1,2).*Y(:,:,2,3) + X(:,:,1,3).*Y(:,:,3,3) + X(:,:,1,4).*Y(:,:,4,3);
    XY(:,:,1,4) = X(:,:,1,1).*Y(:,:,1,4) + X(:,:,1,2).*Y(:,:,2,4) + X(:,:,1,3).*Y(:,:,3,4) + X(:,:,1,4).*Y(:,:,4,4);
    XY(:,:,2,1) = X(:,:,2,1).*Y(:,:,1,1) + X(:,:,2,2).*Y(:,:,2,1) + X(:,:,2,3).*Y(:,:,3,1) + X(:,:,2,4).*Y(:,:,4,1);
    XY(:,:,2,2) = X(:,:,2,1).*Y(:,:,1,2) + X(:,:,2,2).*Y(:,:,2,2) + X(:,:,2,3).*Y(:,:,3,2) + X(:,:,2,4).*Y(:,:,4,2);
    XY(:,:,2,3) = X(:,:,2,1).*Y(:,:,1,3) + X(:,:,2,2).*Y(:,:,2,3) + X(:,:,2,3).*Y(:,:,3,3) + X(:,:,2,4).*Y(:,:,4,3);
    XY(:,:,2,4) = X(:,:,2,1).*Y(:,:,1,4) + X(:,:,2,2).*Y(:,:,2,4) + X(:,:,2,3).*Y(:,:,3,4) + X(:,:,2,4).*Y(:,:,4,4);
    XY(:,:,3,1) = X(:,:,3,1).*Y(:,:,1,1) + X(:,:,3,2).*Y(:,:,2,1) + X(:,:,3,3).*Y(:,:,3,1) + X(:,:,3,4).*Y(:,:,4,1);
    XY(:,:,3,2) = X(:,:,3,1).*Y(:,:,1,2) + X(:,:,3,2).*Y(:,:,2,2) + X(:,:,3,3).*Y(:,:,3,2) + X(:,:,3,4).*Y(:,:,4,2);
    XY(:,:,3,3) = X(:,:,3,1).*Y(:,:,1,3) + X(:,:,3,2).*Y(:,:,2,3) + X(:,:,3,3).*Y(:,:,3,3) + X(:,:,3,4).*Y(:,:,4,3);
    XY(:,:,3,4) = X(:,:,3,1).*Y(:,:,1,4) + X(:,:,3,2).*Y(:,:,2,4) + X(:,:,3,3).*Y(:,:,3,4) + X(:,:,3,4).*Y(:,:,4,4);
    XY(:,:,4,1) = X(:,:,4,1).*Y(:,:,1,1) + X(:,:,4,2).*Y(:,:,2,1) + X(:,:,4,3).*Y(:,:,3,1) + X(:,:,4,4).*Y(:,:,4,1);
    XY(:,:,4,2) = X(:,:,4,1).*Y(:,:,1,2) + X(:,:,4,2).*Y(:,:,2,2) + X(:,:,4,3).*Y(:,:,3,2) + X(:,:,4,4).*Y(:,:,4,2);
    XY(:,:,4,3) = X(:,:,4,1).*Y(:,:,1,3) + X(:,:,4,2).*Y(:,:,2,3) + X(:,:,4,3).*Y(:,:,3,3) + X(:,:,4,4).*Y(:,:,4,3);
    XY(:,:,4,4) = X(:,:,4,1).*Y(:,:,1,4) + X(:,:,4,2).*Y(:,:,2,4) + X(:,:,4,3).*Y(:,:,3,4) + X(:,:,4,4).*Y(:,:,4,4);
else % slow
    X = reshape(permute(X, [3,4,1,2]), [M,M,I*J]); % M x M x IJ
    Y = reshape(permute(Y, [3,4,1,2]), [M,M,I*J]); % M x M x IJ
    XY = zeros( M, M, I*J );
    parfor ij = 1:I*J
        XY(:,:,ij) = X(:,:,ij)*Y(:,:,ij);
    end
    XY = permute(reshape(XY, [M,M,I,J]), [3,4,1,2]); % I x J x M x M
end
end

%%% Inverse %%% 
function [ invX ] = local_inverse( X, I, J, M )
if M == 2
  if ndims(X) == 4 %[I,J,M,M]
    invX = zeros(I,J,M,M);
    detX = X(:,:,1,1).*X(:,:,2,2) - X(:,:,1,2).*X(:,:,2,1);
    invX(:,:,1,1) = X(:,:,2,2);
    invX(:,:,1,2) = -1*X(:,:,1,2);
    invX(:,:,2,1) = conj(invX(:,:,1,2));
    invX(:,:,2,2) = X(:,:,1,1);
    invX = invX./detX; % using implicit expanion
%    invX = bsxfun(@rdivide, invX, detX); % for prior R2016b
  elseif ndims(X) == 3 %[I,M,M]
    detX = X(:,1,1).*X(:,2,2) - X(:,1,2).*X(:,2,1);
    invX(:,1,1) = X(:,2,2);
    invX(:,1,2) = -1*X(:,1,2);
    invX(:,2,1) = conj(invX(:,1,2));
    invX(:,2,2) = X(:,1,1);
    invX = invX./detX; % using implicit expanion
  end
elseif M == 3
    invX = zeros(I,J,M,M);
    detX = X(:,:,1,1).*X(:,:,2,2).*X(:,:,3,3) + X(:,:,2,1).*X(:,:,3,2).*X(:,:,1,3) + X(:,:,3,1).*X(:,:,1,2).*X(:,:,2,3) - X(:,:,1,1).*X(:,:,3,2).*X(:,:,2,3) - X(:,:,3,1).*X(:,:,2,2).*X(:,:,1,3) - X(:,:,2,1).*X(:,:,1,2).*X(:,:,3,3);
    invX(:,:,1,1) = X(:,:,2,2).*X(:,:,3,3) - X(:,:,2,3).*X(:,:,3,2);
    invX(:,:,1,2) = X(:,:,1,3).*X(:,:,3,2) - X(:,:,1,2).*X(:,:,3,3);
    invX(:,:,1,3) = X(:,:,1,2).*X(:,:,2,3) - X(:,:,1,3).*X(:,:,2,2);
    invX(:,:,2,1) = X(:,:,2,3).*X(:,:,3,1) - X(:,:,2,1).*X(:,:,3,3);
    invX(:,:,2,2) = X(:,:,1,1).*X(:,:,3,3) - X(:,:,1,3).*X(:,:,3,1);
    invX(:,:,2,3) = X(:,:,1,3).*X(:,:,2,1) - X(:,:,1,1).*X(:,:,2,3);
    invX(:,:,3,1) = X(:,:,2,1).*X(:,:,3,2) - X(:,:,2,2).*X(:,:,3,1);
    invX(:,:,3,2) = X(:,:,1,2).*X(:,:,3,1) - X(:,:,1,1).*X(:,:,3,2);
    invX(:,:,3,3) = X(:,:,1,1).*X(:,:,2,2) - X(:,:,1,2).*X(:,:,2,1);
    invX = invX./detX; % using implicit expanion
%    invX = bsxfun(@rdivide, invX, detX); % for prior R2016b
elseif M == 4
    invX = zeros(I,J,M,M);
    detX = X(:,:,1,1).*X(:,:,2,2).*X(:,:,3,3).*X(:,:,4,4) + X(:,:,1,1).*X(:,:,2,3).*X(:,:,3,4).*X(:,:,4,2) + X(:,:,1,1).*X(:,:,2,4).*X(:,:,3,2).*X(:,:,4,3) + X(:,:,1,2).*X(:,:,2,1).*X(:,:,3,4).*X(:,:,4,3) + X(:,:,1,2).*X(:,:,2,3).*X(:,:,3,1).*X(:,:,4,4) + X(:,:,1,2).*X(:,:,2,4).*X(:,:,3,3).*X(:,:,4,1) + X(:,:,1,3).*X(:,:,2,1).*X(:,:,3,2).*X(:,:,4,4) + X(:,:,1,3).*X(:,:,2,2).*X(:,:,3,4).*X(:,:,4,1) + X(:,:,1,3).*X(:,:,2,4).*X(:,:,3,1).*X(:,:,4,2) + X(:,:,1,4).*X(:,:,2,1).*X(:,:,3,3).*X(:,:,4,2) + X(:,:,1,4).*X(:,:,2,2).*X(:,:,3,1).*X(:,:,4,3) + X(:,:,1,4).*X(:,:,2,3).*X(:,:,3,2).*X(:,:,4,1) - X(:,:,1,1).*X(:,:,2,2).*X(:,:,3,4).*X(:,:,4,3) - X(:,:,1,1).*X(:,:,2,3).*X(:,:,3,2).*X(:,:,4,4) - X(:,:,1,1).*X(:,:,2,4).*X(:,:,3,3).*X(:,:,4,2) - X(:,:,1,2).*X(:,:,2,1).*X(:,:,3,3).*X(:,:,4,4) - X(:,:,1,2).*X(:,:,2,3).*X(:,:,3,4).*X(:,:,4,1) - X(:,:,1,2).*X(:,:,2,4).*X(:,:,3,1).*X(:,:,4,3) - X(:,:,1,3).*X(:,:,2,1).*X(:,:,3,4).*X(:,:,4,2) - X(:,:,1,3).*X(:,:,2,2).*X(:,:,3,1).*X(:,:,4,4) - X(:,:,1,3).*X(:,:,2,4).*X(:,:,3,2).*X(:,:,4,1) - X(:,:,1,4).*X(:,:,2,1).*X(:,:,3,2).*X(:,:,4,3) - X(:,:,1,4).*X(:,:,2,2).*X(:,:,3,3).*X(:,:,4,1) - X(:,:,1,4).*X(:,:,2,3).*X(:,:,3,1).*X(:,:,4,2);
    invX(:,:,1,1) = X(:,:,2,2).*X(:,:,3,3).*X(:,:,4,4) + X(:,:,2,3).*X(:,:,3,4).*X(:,:,4,2) + X(:,:,2,4).*X(:,:,3,2).*X(:,:,4,3) - X(:,:,2,2).*X(:,:,3,4).*X(:,:,4,3) - X(:,:,2,3).*X(:,:,3,2).*X(:,:,4,4) - X(:,:,2,4).*X(:,:,3,3).*X(:,:,4,2);
    invX(:,:,1,2) = X(:,:,1,2).*X(:,:,3,4).*X(:,:,4,3) + X(:,:,1,3).*X(:,:,3,2).*X(:,:,4,4) + X(:,:,1,4).*X(:,:,3,3).*X(:,:,4,2) - X(:,:,1,2).*X(:,:,3,3).*X(:,:,4,4) - X(:,:,1,3).*X(:,:,3,4).*X(:,:,4,2) - X(:,:,1,4).*X(:,:,3,2).*X(:,:,4,3);
    invX(:,:,1,3) = X(:,:,1,2).*X(:,:,2,3).*X(:,:,4,4) + X(:,:,1,3).*X(:,:,2,4).*X(:,:,4,2) + X(:,:,1,4).*X(:,:,2,2).*X(:,:,4,3) - X(:,:,1,2).*X(:,:,2,4).*X(:,:,4,3) - X(:,:,1,3).*X(:,:,2,2).*X(:,:,4,4) - X(:,:,1,4).*X(:,:,2,3).*X(:,:,4,2);
    invX(:,:,1,4) = X(:,:,1,2).*X(:,:,2,4).*X(:,:,3,3) + X(:,:,1,3).*X(:,:,2,2).*X(:,:,3,4) + X(:,:,1,4).*X(:,:,2,3).*X(:,:,3,2) - X(:,:,1,2).*X(:,:,2,3).*X(:,:,3,4) - X(:,:,1,3).*X(:,:,2,4).*X(:,:,3,2) - X(:,:,1,4).*X(:,:,2,2).*X(:,:,3,3);
    invX(:,:,2,1) = X(:,:,2,1).*X(:,:,3,4).*X(:,:,4,3) + X(:,:,2,3).*X(:,:,3,1).*X(:,:,4,4) + X(:,:,2,4).*X(:,:,3,3).*X(:,:,4,1) - X(:,:,2,1).*X(:,:,3,3).*X(:,:,4,4) - X(:,:,2,3).*X(:,:,3,4).*X(:,:,4,1) - X(:,:,2,4).*X(:,:,3,1).*X(:,:,4,3);
    invX(:,:,2,2) = X(:,:,1,1).*X(:,:,3,3).*X(:,:,4,4) + X(:,:,1,3).*X(:,:,3,4).*X(:,:,4,1) + X(:,:,1,4).*X(:,:,3,1).*X(:,:,4,3) - X(:,:,1,1).*X(:,:,3,4).*X(:,:,4,3) - X(:,:,1,3).*X(:,:,3,1).*X(:,:,4,4) - X(:,:,1,4).*X(:,:,3,3).*X(:,:,4,1);
    invX(:,:,2,3) = X(:,:,1,1).*X(:,:,2,4).*X(:,:,4,3) + X(:,:,1,3).*X(:,:,2,1).*X(:,:,4,4) + X(:,:,1,4).*X(:,:,2,3).*X(:,:,4,1) - X(:,:,1,1).*X(:,:,2,3).*X(:,:,4,4) - X(:,:,1,3).*X(:,:,2,4).*X(:,:,4,1) - X(:,:,1,4).*X(:,:,2,1).*X(:,:,4,3);
    invX(:,:,2,4) = X(:,:,1,1).*X(:,:,2,3).*X(:,:,3,4) + X(:,:,1,3).*X(:,:,2,4).*X(:,:,3,1) + X(:,:,1,4).*X(:,:,2,1).*X(:,:,3,3) - X(:,:,1,1).*X(:,:,2,4).*X(:,:,3,3) - X(:,:,1,3).*X(:,:,2,1).*X(:,:,3,4) - X(:,:,1,4).*X(:,:,2,3).*X(:,:,3,1);
    invX(:,:,3,1) = X(:,:,2,1).*X(:,:,3,2).*X(:,:,4,4) + X(:,:,2,2).*X(:,:,3,4).*X(:,:,4,1) + X(:,:,2,4).*X(:,:,3,1).*X(:,:,4,2) - X(:,:,2,1).*X(:,:,3,4).*X(:,:,4,2) - X(:,:,2,2).*X(:,:,3,1).*X(:,:,4,4) - X(:,:,2,4).*X(:,:,3,2).*X(:,:,4,1);
    invX(:,:,3,2) = X(:,:,1,1).*X(:,:,3,4).*X(:,:,4,2) + X(:,:,1,2).*X(:,:,3,1).*X(:,:,4,4) + X(:,:,1,4).*X(:,:,3,2).*X(:,:,4,1) - X(:,:,1,1).*X(:,:,3,2).*X(:,:,4,4) - X(:,:,1,2).*X(:,:,3,4).*X(:,:,4,1) - X(:,:,1,4).*X(:,:,3,1).*X(:,:,4,2);
    invX(:,:,3,3) = X(:,:,1,1).*X(:,:,2,2).*X(:,:,4,4) + X(:,:,1,2).*X(:,:,2,4).*X(:,:,4,1) + X(:,:,1,4).*X(:,:,2,1).*X(:,:,4,2) - X(:,:,1,1).*X(:,:,2,4).*X(:,:,4,2) - X(:,:,1,2).*X(:,:,2,1).*X(:,:,4,4) - X(:,:,1,4).*X(:,:,2,2).*X(:,:,4,1);
    invX(:,:,3,4) = X(:,:,1,1).*X(:,:,2,4).*X(:,:,3,2) + X(:,:,1,2).*X(:,:,2,1).*X(:,:,3,4) + X(:,:,1,4).*X(:,:,2,2).*X(:,:,3,1) - X(:,:,1,1).*X(:,:,2,2).*X(:,:,3,4) - X(:,:,1,2).*X(:,:,2,4).*X(:,:,3,1) - X(:,:,1,4).*X(:,:,2,1).*X(:,:,3,2);
    invX(:,:,4,1) = X(:,:,2,1).*X(:,:,3,3).*X(:,:,4,2) + X(:,:,2,2).*X(:,:,3,1).*X(:,:,4,3) + X(:,:,2,3).*X(:,:,3,2).*X(:,:,4,1) - X(:,:,2,1).*X(:,:,3,2).*X(:,:,4,3) - X(:,:,2,2).*X(:,:,3,3).*X(:,:,4,1) - X(:,:,2,3).*X(:,:,3,1).*X(:,:,4,2);
    invX(:,:,4,2) = X(:,:,1,1).*X(:,:,3,2).*X(:,:,4,3) + X(:,:,1,2).*X(:,:,3,3).*X(:,:,4,1) + X(:,:,1,3).*X(:,:,3,1).*X(:,:,4,2) - X(:,:,1,1).*X(:,:,3,3).*X(:,:,4,2) - X(:,:,1,2).*X(:,:,3,1).*X(:,:,4,3) - X(:,:,1,3).*X(:,:,3,2).*X(:,:,4,1);
    invX(:,:,4,3) = X(:,:,1,1).*X(:,:,2,3).*X(:,:,4,2) + X(:,:,1,2).*X(:,:,2,1).*X(:,:,4,3) + X(:,:,1,3).*X(:,:,2,2).*X(:,:,4,1) - X(:,:,1,1).*X(:,:,2,2).*X(:,:,4,3) - X(:,:,1,2).*X(:,:,2,3).*X(:,:,4,1) - X(:,:,1,3).*X(:,:,2,1).*X(:,:,4,2);
    invX(:,:,4,4) = X(:,:,1,1).*X(:,:,2,2).*X(:,:,3,3) + X(:,:,1,2).*X(:,:,2,3).*X(:,:,3,1) + X(:,:,1,3).*X(:,:,2,1).*X(:,:,3,2) - X(:,:,1,1).*X(:,:,2,3).*X(:,:,3,2) - X(:,:,1,2).*X(:,:,2,1).*X(:,:,3,3) - X(:,:,1,3).*X(:,:,2,2).*X(:,:,3,1);
    invX = invX./detX; % using implicit expanion
%    invX = bsxfun(@rdivide, invX, detX); % for prior R2016b
else % slow
    X = reshape(permute(X, [3,4,1,2]), [M,M,I*J]); % M x M x IJ
    eyeM = eye(M);
    invX = zeros(M,M,I*J);
    parfor ij = 1:I*J
            invX(:,:,ij) = X(:,:,ij)\eyeM;
    end
    invX = permute(reshape(invX, [M,M,I,J]), [3,4,1,2]); % I x J x M x M
end
end

%%% Trace %%%
function [ trX ] = local_trace( X, I, J, M )
if M == 2
    trX = X(:,:,1,1) + X(:,:,2,2);
elseif M == 3
    trX = X(:,:,1,1) + X(:,:,2,2) + X(:,:,3,3);
elseif M == 4
    trX = X(:,:,1,1) + X(:,:,2,2) + X(:,:,3,3) + X(:,:,4,4);
else % slow
    X = reshape(permute(X, [3,4,1,2]), [M,M,I*J]); % M x M x IJ
    trX = zeros(I*J,1);
    parfor ij = 1:I*J
            trX(ij) = trace(X(:,:,ij));
    end
    trX = reshape(trX, [I,J]); % I x J
end
end

%%% Determinant %%%
function [ detX ] = local_det( X, I, J, M )
if M == 2
    detX = X(:,:,1,1).*X(:,:,2,2) - X(:,:,1,2).*X(:,:,2,1);
elseif M == 3
    detX = X(:,:,1,1).*X(:,:,2,2).*X(:,:,3,3) + X(:,:,2,1).*X(:,:,3,2).*X(:,:,1,3) + X(:,:,3,1).*X(:,:,1,2).*X(:,:,2,3) - X(:,:,1,1).*X(:,:,3,2).*X(:,:,2,3) - X(:,:,3,1).*X(:,:,2,2).*X(:,:,1,3) - X(:,:,2,1).*X(:,:,1,2).*X(:,:,3,3);
elseif M == 4
    detX = X(:,:,1,1).*X(:,:,2,2).*X(:,:,3,3).*X(:,:,4,4) + X(:,:,1,1).*X(:,:,2,3).*X(:,:,3,4).*X(:,:,4,2) + X(:,:,1,1).*X(:,:,2,4).*X(:,:,3,2).*X(:,:,4,3) + X(:,:,1,2).*X(:,:,2,1).*X(:,:,3,4).*X(:,:,4,3) + X(:,:,1,2).*X(:,:,2,3).*X(:,:,3,1).*X(:,:,4,4) + X(:,:,1,2).*X(:,:,2,4).*X(:,:,3,3).*X(:,:,4,1) + X(:,:,1,3).*X(:,:,2,1).*X(:,:,3,2).*X(:,:,4,4) + X(:,:,1,3).*X(:,:,2,2).*X(:,:,3,4).*X(:,:,4,1) + X(:,:,1,3).*X(:,:,2,4).*X(:,:,3,1).*X(:,:,4,2) + X(:,:,1,4).*X(:,:,2,1).*X(:,:,3,3).*X(:,:,4,2) + X(:,:,1,4).*X(:,:,2,2).*X(:,:,3,1).*X(:,:,4,3) + X(:,:,1,4).*X(:,:,2,3).*X(:,:,3,2).*X(:,:,4,1) - X(:,:,1,1).*X(:,:,2,2).*X(:,:,3,4).*X(:,:,4,3) - X(:,:,1,1).*X(:,:,2,3).*X(:,:,3,2).*X(:,:,4,4) - X(:,:,1,1).*X(:,:,2,4).*X(:,:,3,3).*X(:,:,4,2) - X(:,:,1,2).*X(:,:,2,1).*X(:,:,3,3).*X(:,:,4,4) - X(:,:,1,2).*X(:,:,2,3).*X(:,:,3,4).*X(:,:,4,1) - X(:,:,1,2).*X(:,:,2,4).*X(:,:,3,1).*X(:,:,4,3) - X(:,:,1,3).*X(:,:,2,1).*X(:,:,3,4).*X(:,:,4,2) - X(:,:,1,3).*X(:,:,2,2).*X(:,:,3,1).*X(:,:,4,4) - X(:,:,1,3).*X(:,:,2,4).*X(:,:,3,2).*X(:,:,4,1) - X(:,:,1,4).*X(:,:,2,1).*X(:,:,3,2).*X(:,:,4,3) - X(:,:,1,4).*X(:,:,2,2).*X(:,:,3,3).*X(:,:,4,1) - X(:,:,1,4).*X(:,:,2,3).*X(:,:,3,1).*X(:,:,4,2);
else % slow
    X = reshape(permute(X, [3,4,1,2]), [M,M,I*J]); % M x M x IJ
    detX = zeros(I*J,1);
    parfor ij = 1:I*J
            detX(ij) = det(X(:,:,ij));
    end
    detX = reshape(detX, [I,J]); % I x J
end
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% EOF %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%